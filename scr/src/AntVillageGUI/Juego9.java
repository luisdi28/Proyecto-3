package AntVillageGUI;

import Algorithms.Dijkstra;
import AntNFood.Comida;
import AntNFood.Hormiga;
import AntNFood.comidaP;
import Graph.ConstructorG;
import Graph.Grafo;
import Graph.NodoG;
import Lists.listaNormal;
import XML.xmlBuilder;
import XML.xmlReader;
import org.xml.sax.SAXException;
import rsscalelabel.RSScaleLabel;
import javax.swing.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.List;

public class Juego9 extends JFrame implements ActionListener {

    String hormiguero = "imagenes/imagen1.png";
    String comida_juego = "imagenes/Comida.png";
    boolean flag_comida = false;

    private Hormiga hormiga;
    private comidaP comida;
    private Dijkstra dijkstra;
    ConstructorG constructorG = new ConstructorG();
    Grafo grafo;

    private List list;

    private int x, y, Gx, Gy, iteraciones;
    private Image enemy;
    private boolean flag;
    private listaNormal listanormal;

    private Timer timer;
    private XML.xmlBuilder xmlBuilder;
    private XML.xmlReader xmlReader;

    public Juego9(int alimento) {

        initComponents();

        comida = new comidaP(0,0);
        grafo = constructorG.crearGrafo(9);
        hormiga = new Hormiga(grafo ,"9" ,"9" ,  A.getX() , A.getY() ,0 , 0);
        dijkstra = new Dijkstra();

        Comida_Esco.setText(String.valueOf(alimento));
        Comida_azul.setText("0");
        Comida_verde.setText("0");

        rsscalelabel.RSScaleLabel.setScaleLabel(A, hormiguero);
        rsscalelabel.RSScaleLabel.setScaleLabel(B, hormiguero);
        rsscalelabel.RSScaleLabel.setScaleLabel(C, hormiguero);
        rsscalelabel.RSScaleLabel.setScaleLabel(D, hormiguero);
        rsscalelabel.RSScaleLabel.setScaleLabel(E, hormiguero);
        rsscalelabel.RSScaleLabel.setScaleLabel(F, hormiguero);
        rsscalelabel.RSScaleLabel.setScaleLabel(G, hormiguero);
        rsscalelabel.RSScaleLabel.setScaleLabel(H, hormiguero);
        rsscalelabel.RSScaleLabel.setScaleLabel(I, hormiguero);

        timer = new Timer(500,this);
        timer.start();

        x = 0;
        y = 0;
        Gx = A.getX();
        Gy = A.getY();
        iteraciones = 0;
        flag = false;

        enemy = new ImageIcon("imagenes\\hormiga verde.png").getImage();

    }

    private Juego9() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelJuego = new JPanel();
        A = new JLabel();
        B = new JLabel();
        C = new JLabel();
        D = new JLabel();
        E = new JLabel();
        F = new JLabel();
        G = new JLabel();
        H = new JLabel();
        I = new JLabel();

        Comida_A = new JLabel();
        Comida_B = new JLabel();
        Comida_C = new JLabel();
        Comida_D = new JLabel();
        Comida_E = new JLabel();
        Comida_F = new JLabel();
        Comida_G = new JLabel();
        Comida_H = new JLabel();
        Comida_I = new JLabel();

        Nombre_A = new JLabel();
        Nombre_B = new JLabel();
        Nombre_C = new JLabel();
        Nombre_D = new JLabel();
        Nombre_E = new JLabel();
        Nombre_F = new JLabel();
        Nombre_G = new JLabel();
        Nombre_H = new JLabel();
        Nombre_I = new JLabel();

        Cerrar = new JButton();

        panelInfo = new JPanel();
        Cantidad = new JLabel();
        Comida_Esco = new JLabel();
        Hormiga_v = new JLabel();
        Hormiga_a = new JLabel();
        Comida_azul = new JLabel();
        Comida_verde = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panelJuego.setBackground(new java.awt.Color(161, 130, 98));
        panelJuego.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Comida_A.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Comida_AMouseClicked(evt);
            }
        });
        Comida_B.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Comida_BMouseClicked(evt);
            }
        });
        Comida_C.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Comida_CMouseClicked(evt);
            }
        });
        Comida_D.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Comida_DMouseClicked(evt);
            }
        });
        Comida_E.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Comida_EMouseClicked(evt);
            }
        });
        Comida_F.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Comida_FMouseClicked(evt);
            }
        });
        Comida_G.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Comida_GMouseClicked(evt);
            }
        });
        Comida_H.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Comida_HMouseClicked(evt);
            }
        });
        Comida_I.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Comida_IMouseClicked(evt);
            }
        });
        Cerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                try {
                    Cerrar(evt);
                } catch (ParserConfigurationException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (SAXException e) {
                    e.printStackTrace();
                } catch (TransformerException e) {
                    e.printStackTrace();
                }
            }
        });

        panelJuego.add(panelInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 633, -1));

        panelJuego.add(Comida_A, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 119, 100, 100));
        panelJuego.add(Comida_B, new org.netbeans.lib.awtextra.AbsoluteConstraints(239, 105, 100, 100));
        panelJuego.add(Comida_C, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 130, 100, 100));
        panelJuego.add(Comida_I, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 100, 100));
        panelJuego.add(Comida_E, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 100, 100));
        panelJuego.add(Comida_F, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 290, 100, 100));
        panelJuego.add(Comida_H, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 510, 100, 100));
        panelJuego.add(Comida_G, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 440, 100, 100));
        panelJuego.add(Comida_D, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 510, 100, 100));

        panelJuego.add(A, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 119, 100, 100));
        panelJuego.add(B, new org.netbeans.lib.awtextra.AbsoluteConstraints(239, 105, 100, 100));
        panelJuego.add(C, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 130, 100, 100));
        panelJuego.add(D, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 510, 100, 100));
        panelJuego.add(E, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 100, 100));
        panelJuego.add(F, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 290, 100, 100));
        panelJuego.add(G, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 440, 100, 100));
        panelJuego.add(H, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 510, 100, 100));
        panelJuego.add(I, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 100, 100));

        Nombre_A.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Nombre_A.setText("A");
        panelJuego.add(Nombre_A, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 55, 50, 100));

        Nombre_B.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Nombre_B.setText("B");
        panelJuego.add(Nombre_B, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 67, 50, 50));

        Nombre_C.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Nombre_C.setText("C");
        panelJuego.add(Nombre_C, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 90, 50, 50));

        Nombre_D.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Nombre_D.setText("D");
        panelJuego.add(Nombre_D, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 470, 50, 50));

        Nombre_E.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Nombre_E.setText("E");
        panelJuego.add(Nombre_E, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 240, 50, 50));

        Nombre_F.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Nombre_F.setText("F");
        panelJuego.add(Nombre_F, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 250, 50, 50));

        Nombre_G.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Nombre_G.setText("G");
        panelJuego.add(Nombre_G, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 400, 50, 50));

        Nombre_H.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Nombre_H.setText("H");
        panelJuego.add(Nombre_H, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 470, 50, 50));

        Nombre_I.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Nombre_I.setText("I");
        panelJuego.add(Nombre_I, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, 100, 100));

        panelInfo.setBackground(new java.awt.Color(0, 102, 102));
        panelInfo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Cantidad.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Cantidad.setText("Cantidad de comida escogida:");
        panelInfo.add(Cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        Comida_Esco.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Comida_Esco.setText(".....");
        panelInfo.add(Comida_Esco, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, -1, -1));

        Hormiga_a.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Hormiga_a.setText("Hormigas Azules:");
        panelInfo.add(Hormiga_a, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, -1, -1));

        Comida_azul.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Comida_azul.setText(".....");
        panelInfo.add(Comida_azul, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 40, -1, -1));

        Comida_verde.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Comida_verde.setText(".....");
        panelInfo.add(Comida_verde, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, 34, -1));

        Hormiga_v.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        Hormiga_v.setText("Hormigas Verdes:");
        panelInfo.add(Hormiga_v, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));

        Cerrar.setFont(new Font("Times New Roman", 1, 16)); // NOI18N
        Cerrar.setText("Cerrar");
        panelJuego.add(Cerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 585, 100, -1));

        panelJuego.add(panelInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 80));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(panelJuego, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(panelJuego, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Comida_AMouseClicked(MouseEvent evt) {
        if (flag_comida == false){
            flag_comida=true;
            comida.setComida(A.getX(),A.getY());
            RSScaleLabel.setScaleLabel(Comida_A, comida_juego);
            NodoG nodoH = hormiga.obtenerNodo(grafo);
            NodoG nodoC = comida.obtenerNodo(grafo);
            dijkstra.rutaCostoMinimoDijkstra(nodoH);
            List list = dijkstra.obtenerRuta(nodoC);
            setList(list);
            setListanormal();
            moverVerde();
            setFlag();
        }
        else{
        }

    }

    private void Comida_BMouseClicked(MouseEvent evt) {
        if (flag_comida == false){
            flag_comida=true;
            comida.setComida(B.getX(),B.getY());
            RSScaleLabel.setScaleLabel(Comida_B, comida_juego);
            NodoG nodoH = hormiga.obtenerNodo(grafo);
            NodoG nodoC = comida.obtenerNodo(grafo);
            dijkstra.rutaCostoMinimoDijkstra(nodoH);
            List list = dijkstra.obtenerRuta(nodoC);
            setList(list);
            setListanormal();
            moverVerde();
            setFlag();
        }
        else{
        }

    }

    private void Comida_CMouseClicked(MouseEvent evt) {
        if (flag_comida == false){
            flag_comida=true;
            comida.setComida(C.getX(),C.getY());
            RSScaleLabel.setScaleLabel(Comida_C, comida_juego);
            NodoG nodoH = hormiga.obtenerNodo(grafo);
            NodoG nodoC = comida.obtenerNodo(grafo);
            dijkstra.rutaCostoMinimoDijkstra(nodoH);
            List list = dijkstra.obtenerRuta(nodoC);
            setList(list);
            setListanormal();
            moverVerde();
            setFlag();
        }
        else{
        }
    }

    private void Comida_DMouseClicked(MouseEvent evt) {
        if (flag_comida == false){
            flag_comida=true;
            comida.setComida(D.getX(),D.getY());
            RSScaleLabel.setScaleLabel(Comida_D, comida_juego);
            NodoG nodoH = hormiga.obtenerNodo(grafo);
            NodoG nodoC = comida.obtenerNodo(grafo);
            dijkstra.rutaCostoMinimoDijkstra(nodoH);
            List list = dijkstra.obtenerRuta(nodoC);
            setList(list);
            setListanormal();
            moverVerde();
            setFlag();
        }
        else{
        }
    }

    private void Comida_EMouseClicked(MouseEvent evt) {
        if (flag_comida == false){
            flag_comida=true;
            comida.setComida(E.getX(),E.getY());
            RSScaleLabel.setScaleLabel(Comida_E, comida_juego);
            NodoG nodoH = hormiga.obtenerNodo(grafo);
            NodoG nodoC = comida.obtenerNodo(grafo);
            dijkstra.rutaCostoMinimoDijkstra(nodoH);
            List list = dijkstra.obtenerRuta(nodoC);
            setList(list);
            setListanormal();
            moverVerde();
            setFlag();
        }
        else{
        }
    }

    private void Comida_FMouseClicked(java.awt.event.MouseEvent evt) {
        if (flag_comida == false){
            flag_comida=true;
            comida.setComida(F.getX(),F.getY());
            RSScaleLabel.setScaleLabel(Comida_F, comida_juego);
            NodoG nodoH = hormiga.obtenerNodo(grafo);
            NodoG nodoC = comida.obtenerNodo(grafo);
            dijkstra.rutaCostoMinimoDijkstra(nodoH);
            List list = dijkstra.obtenerRuta(nodoC);
            setList(list);
            setListanormal();
            moverVerde();
            setFlag();
        }
        else{
        }
    }

    private void Comida_GMouseClicked(java.awt.event.MouseEvent evt) {
        if (flag_comida == false){
            flag_comida=true;
            comida.setComida(G.getX(),G.getY());
            RSScaleLabel.setScaleLabel(Comida_G, comida_juego);
            NodoG nodoH = hormiga.obtenerNodo(grafo);
            NodoG nodoC = comida.obtenerNodo(grafo);
            dijkstra.rutaCostoMinimoDijkstra(nodoH);
            List list = dijkstra.obtenerRuta(nodoC);
            setList(list);
            setListanormal();
            moverVerde();
            setFlag();
        }
        else{
        }
    }

    private void Comida_HMouseClicked(java.awt.event.MouseEvent evt) {
        if (flag_comida == false){
            flag_comida=true;
            comida.setComida(H.getX(),H.getY());
            RSScaleLabel.setScaleLabel(Comida_H, comida_juego);
            NodoG nodoH = hormiga.obtenerNodo(grafo);
            NodoG nodoC = comida.obtenerNodo(grafo);
            dijkstra.rutaCostoMinimoDijkstra(nodoH);
            List list = dijkstra.obtenerRuta(nodoC);
            setList(list);
            setListanormal();
            moverVerde();
            setFlag();
        }
        else{
        }
    }

    private void Comida_IMouseClicked(java.awt.event.MouseEvent evt) {
        if (flag_comida == false){
            flag_comida=true;
            comida.setComida(I.getX(),I.getY());
            RSScaleLabel.setScaleLabel(Comida_I, comida_juego);
            NodoG nodoH = hormiga.obtenerNodo(grafo);
            NodoG nodoC = comida.obtenerNodo(grafo);
            dijkstra.rutaCostoMinimoDijkstra(nodoH);
            List list = dijkstra.obtenerRuta(nodoC);
            setList(list);
            setListanormal();
            moverVerde();
            setFlag();
        }
        else{
        }
    }

    private void Cerrar(MouseEvent evt) throws ParserConfigurationException, IOException, SAXException, TransformerException {
        xmlBuilder = new xmlBuilder();
        xmlReader = new xmlReader();
        xmlReader.readLoops("GameLoops\\gameplayed.xml");
        int loops = xmlReader.getgamelop();
        int loops2 = loops +1;
        xmlBuilder.xmlLoops(Integer.toString(loops2));
        xmlBuilder.endGamexml(getComida_verde() , getComida_azul() , Integer.toString(loops2));

        //Espacio para crear el XML Builder
        timer.stop();
        Juego9.this.dispose();
        new Bienvenida().setVisible(true);

    }

    public static String getComida_verde() {
        return Comida_verde.getText();
    }

    public static void setComida_verde(String comida_verde) {
        Comida_verde.setText(comida_verde);
    }

    public static String getComida_azul() {
        return Comida_azul.getText();
    }

    public static void setComida_azul(String comida_azul) {
        Comida_azul.setText(comida_azul);
    }

    public boolean isFlag_comida() {
        return flag_comida;
    }

    public void setFlag_comida(boolean flag_comida) {
        this.flag_comida = flag_comida;
    }

    public static void reinicia_labels(){
        rsscalelabel.RSScaleLabel.setScaleLabel(Comida_A, null);
        rsscalelabel.RSScaleLabel.setScaleLabel(Comida_B, null);
        rsscalelabel.RSScaleLabel.setScaleLabel(Comida_C, null);
        rsscalelabel.RSScaleLabel.setScaleLabel(Comida_D, null);
        rsscalelabel.RSScaleLabel.setScaleLabel(Comida_E, null);
        rsscalelabel.RSScaleLabel.setScaleLabel(Comida_F, null);
        rsscalelabel.RSScaleLabel.setScaleLabel(Comida_G, null);
        rsscalelabel.RSScaleLabel.setScaleLabel(Comida_H, null);
        rsscalelabel.RSScaleLabel.setScaleLabel(Comida_I, null);
    }

    public void setList(List list){
        this.list = list;
    }

    public void setFlag(){
        this.flag = true;
    }

    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D G2D = (Graphics2D) g;
        G2D.drawImage(enemy, Gx, Gy, null);
    }

    public void moverVerde(){

        NodoG nodoG;
        NodoG punto;
        int x, y;
        for (int i = 0; i < list.size(); i++){                  // Lista de puntos
            for (int j = 0; j < grafo.totalNodos(); j++){       // ArrayList de nodos

                nodoG = grafo.getNodos().get(j);    // Toma el valor del nodo (Grafo)
                punto = (NodoG) list.get(i);       // Toma el valor del punto (Lista de puntos)

                if (nodoG.equals(punto) == true){   // Si ambos valores son iguales

                    x = nodoG.getPosicion_x();      // Toma el valor x del nodo
                    y = nodoG.getPosicion_y();      // Toma el valor y del nodo
                    moverHGreen(x, y);              // Llama al método
                    System.out.println("x" + x + "y" + y);
                }
            }
        }
        flag = false;
    }
    public void moverHGreen(int x, int y) {
        listanormal.insertFirst(x,y);
    }

    public void setListanormal(){
        this.listanormal = new listaNormal();
    }

    public void checkIteraciones(){
        if (iteraciones == listanormal.getSize()){
            flag=false;
            iteraciones=0;
            listanormal = null;
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (flag == true) {
            if (iteraciones != listanormal.getSize()) {
                x = listanormal.buscarx(iteraciones);
                y = listanormal.buscary(iteraciones);
                if (Gx != x || Gy != y) {
                    if (Gx == x && Gy < y) {
                        Gy += 10;
                        repaint();
                    }
                    if (Gx == x && Gy > y) {
                        Gy -= 10;
                        repaint();
                    }
                    if (Gy == y && Gx < x) {
                        Gx += 10;
                        repaint();
                    }
                    if (Gy == y && Gx > x) {
                        Gx -= 10;
                        repaint();
                    }
                    if (Gx > x && Gy < y) {
                        Gx = Gx - 10;
                        Gy += 10;
                        repaint();
                    } else if (Gx < x && Gy > y) {
                        Gx = Gx + 10;
                        Gy -= 10;
                        repaint();
                    } else if (Gx < x && Gy < y) {
                        Gx += 10;
                        Gy += 10;
                        repaint();
                    } else {
                        Gx -= 10;
                        Gy -= 10;
                        repaint();
                    }
                } else {
                    iteraciones += 1;
                }
            } else {

                System.out.println("el x es:" + Gx + " el y es:" + Gy);
                checkIteraciones();
                flag = false;
                flag_comida = false;
                Comida obj = new Comida("Juego 9", Integer.parseInt(Comida_Esco.getText()), "verde");
                Comida.main();
            }

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Juego9.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Juego9().setVisible(true);
            }
        });
    }
    
    private JLabel Cantidad;
    private JLabel Comida_Esco;
    private static JLabel Comida_azul;
    private static JLabel Comida_verde;
    private JLabel Hormiga_a;
    private JLabel Hormiga_v;

    private JLabel Nombre_A;
    private JLabel Nombre_B;
    private JLabel Nombre_C;
    private JLabel Nombre_D;
    private JLabel Nombre_E;
    private JLabel Nombre_F;
    private JLabel Nombre_G;
    private JLabel Nombre_H;
    private JLabel Nombre_I;

    private JLabel A;
    private JLabel B;
    private JLabel C;
    private JLabel D;
    private JLabel E;
    private JLabel F;
    private JLabel G;
    private JLabel H;
    private JLabel I;

    private static JLabel Comida_A;
    private static JLabel Comida_B;
    private static JLabel Comida_C;
    private static JLabel Comida_D;
    private static JLabel Comida_E;
    private static JLabel Comida_F;
    private static JLabel Comida_G;
    private static JLabel Comida_H;
    private static JLabel Comida_I;

    private static JButton Cerrar;

    private JPanel panelInfo;
    private JPanel panelJuego;
    // End of variables declaration//GEN-END:variables
}

